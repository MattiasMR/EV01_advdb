{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "CreatePacienteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-createPaciente"
      }
    },
    "GetPacientesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getPacientes"
      }
    },
    "GetPacienteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getPaciente"
      }
    },
    "UpdatePacienteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-updatePaciente"
      }
    },
    "CreateMedicoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-createMedico"
      }
    },
    "GetMedicosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getMedicos"
      }
    },
    "GetMedicoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getMedico"
      }
    },
    "UpdateMedicoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-updateMedico"
      }
    },
    "UpdateEstadoMedicoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-updateEstadoMedico"
      }
    },
    "CreateTutorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-createTutor"
      }
    },
    "GetTutoresLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getTutores"
      }
    },
    "GetTutorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getTutor"
      }
    },
    "UpdateTutorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-updateTutor"
      }
    },
    "GetPacientesByTutorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getPacientesByTutor"
      }
    },
    "GetHistorialPacienteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getHistorialPaciente"
      }
    },
    "GetFichaClinicaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getFichaClinica"
      }
    },
    "RankingProcedimientosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-rankingProcedimientos"
      }
    },
    "GetVacunasPacienteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getVacunasPaciente"
      }
    },
    "CreatePacienteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/paciente.createPaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-createPaciente",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "CreatePacienteLogGroup"
      ]
    },
    "GetPacientesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/paciente.getPacientes",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getPacientes",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetPacientesLogGroup"
      ]
    },
    "GetPacienteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/paciente.getPaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getPaciente",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetPacienteLogGroup"
      ]
    },
    "UpdatePacienteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/paciente.updatePaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-updatePaciente",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "UpdatePacienteLogGroup"
      ]
    },
    "CreateMedicoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/medico.createMedico",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-createMedico",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "CreateMedicoLogGroup"
      ]
    },
    "GetMedicosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/medico.getMedicos",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getMedicos",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetMedicosLogGroup"
      ]
    },
    "GetMedicoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/medico.getMedico",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getMedico",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetMedicoLogGroup"
      ]
    },
    "UpdateMedicoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/medico.updateMedico",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-updateMedico",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "UpdateMedicoLogGroup"
      ]
    },
    "UpdateEstadoMedicoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/medico.updateEstadoMedico",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-updateEstadoMedico",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "UpdateEstadoMedicoLogGroup"
      ]
    },
    "CreateTutorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/tutor.createTutor",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-createTutor",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "CreateTutorLogGroup"
      ]
    },
    "GetTutoresLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/tutor.getTutores",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getTutores",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetTutoresLogGroup"
      ]
    },
    "GetTutorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/tutor.getTutor",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getTutor",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetTutorLogGroup"
      ]
    },
    "UpdateTutorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/tutor.updateTutor",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-updateTutor",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "UpdateTutorLogGroup"
      ]
    },
    "GetPacientesByTutorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/tutor.getPacientesByTutor",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getPacientesByTutor",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetPacientesByTutorLogGroup"
      ]
    },
    "GetHistorialPacienteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/busquedas.historialPaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getHistorialPaciente",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetHistorialPacienteLogGroup"
      ]
    },
    "GetFichaClinicaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/busquedas.fichaClinicaPaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getFichaClinica",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetFichaClinicaLogGroup"
      ]
    },
    "RankingProcedimientosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/busquedas.rankingProcedimientos",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-rankingProcedimientos",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "RankingProcedimientosLogGroup"
      ]
    },
    "GetVacunasPacienteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752550610917-2025-07-15T03:36:50.917Z/DynamoTest.zip"
        },
        "Handler": "src/busquedas.vacunasPaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getVacunasPaciente",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetVacunasPacienteLogGroup"
      ]
    },
    "CreatePacienteLambdaVersionaNdYZJv3jWf6aSU7OTtHJpLZTfE95YbTatDzm99lE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreatePacienteLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "GetPacientesLambdaVersiongE2lEQzxtTdjo96IrgqpN4FVgAKK3GYpJR6S5V2Vzg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPacientesLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "GetPacienteLambdaVersion9oa8AnepJCOL8y1xF4v73I7UfIQ6BesgHkzgX796zvU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPacienteLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "UpdatePacienteLambdaVersionf1fpN6wfoIeJ4IhJK1BV8rpWVRUWzR5GftrP40g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdatePacienteLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "CreateMedicoLambdaVersionzqkfjQ3BecDKxyDlxWiIkFiqSnjVQqsN1ipTi6UyWM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateMedicoLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "GetMedicosLambdaVersionFNm1uAMQvH6hkKhSK4X1oX1xt7e2rY2M1ekmBaRchig": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMedicosLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "GetMedicoLambdaVersionOP4Yk8xKPMyXZNQzDW55knOmoPn7jzivOLUd5Mvnw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMedicoLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "UpdateMedicoLambdaVersionlEjj342hDkn5HGaPHuJ8XIQXKszpx3dwjGUbhG0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateMedicoLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "UpdateEstadoMedicoLambdaVersion7clnV98ASwQ21UPXGsTh0npBEJyNT56wtaLBUO9oCGI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateEstadoMedicoLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "CreateTutorLambdaVersionmJfS0WezszX0bydPptFuMyFWyuGvvtaGjo59Ded7JFg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateTutorLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "GetTutoresLambdaVersionEWYUiebHM23eXimrBM66esqJPBib3i2k10xf0FdA4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTutoresLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "GetTutorLambdaVersioneTp4RIJQd0czKERYwjhofrTnzz585yCBmJnVFEWmavA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTutorLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "UpdateTutorLambdaVersionKMXQLY7W8H1y1VbAKoYlgoHEbrZpzWyKL7g9m2yE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTutorLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "GetPacientesByTutorLambdaVersion5YM5uQAELZoksB5bJJAKACPaPRz2TtCHQeZ4wTZhdo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPacientesByTutorLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "GetHistorialPacienteLambdaVersionY9Kkb1fZg5V8MDtvU74Naapf5pHvR8MKI9tZS1bh1cU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetHistorialPacienteLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "GetFichaClinicaLambdaVersionpko1FmhDbpZQct90Er9yMzq9TQjGn9z80xLxX7ul264": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFichaClinicaLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "RankingProcedimientosLambdaVersionAnsnmzcnoSxQ9OTLs77kMwmqORnPTAM28ZtKQDtgA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RankingProcedimientosLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "GetVacunasPacienteLambdaVersionQyDtgwgiM0hax7HilxPs06VyweMrkIfeSpT3EhIA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetVacunasPacienteLambdaFunction"
        },
        "CodeSha256": "bcxAxNklkc4eVb/awb57qXQh/948kubprT1iKSfo9ZQ="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-DynamoTest",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "CreatePacienteLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreatePacienteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreatePaciente": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreatePacienteLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostPaciente": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /paciente",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreatePaciente"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreatePaciente"
    },
    "GetPacientesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPacientesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetPacientes": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetPacientesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPaciente": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /paciente",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetPacientes"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetPacientes"
    },
    "GetPacienteLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPacienteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetPaciente": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetPacienteLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPacienteIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /paciente/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetPaciente"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetPaciente"
    },
    "UpdatePacienteLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdatePacienteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdatePaciente": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdatePacienteLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutPacienteIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /paciente/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdatePaciente"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdatePaciente"
    },
    "CreateMedicoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateMedicoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateMedico": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateMedicoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostMedico": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /medico",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateMedico"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateMedico"
    },
    "GetMedicosLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMedicosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetMedicos": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetMedicosLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetMedico": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /medico",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetMedicos"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetMedicos"
    },
    "GetMedicoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMedicoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetMedico": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetMedicoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetMedicoIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /medico/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetMedico"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetMedico"
    },
    "UpdateMedicoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateMedicoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateMedico": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateMedicoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutMedicoIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /medico/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateMedico"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateMedico"
    },
    "UpdateEstadoMedicoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateEstadoMedicoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateEstadoMedico": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateEstadoMedicoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchMedicoIdVarCambiarestado": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /medico/{id}/cambiarEstado",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateEstadoMedico"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateEstadoMedico"
    },
    "CreateTutorLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateTutorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateTutor": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateTutorLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostTutor": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /tutor",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateTutor"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateTutor"
    },
    "GetTutoresLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTutoresLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetTutores": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetTutoresLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTutor": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /tutor",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetTutores"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetTutores"
    },
    "GetTutorLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTutorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetTutor": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetTutorLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTutorIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /tutor/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetTutor"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetTutor"
    },
    "UpdateTutorLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTutorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateTutor": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateTutorLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutTutorIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /tutor/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateTutor"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateTutor"
    },
    "GetPacientesByTutorLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPacientesByTutorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetPacientesByTutor": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetPacientesByTutorLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTutorIdVarPacientes": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /tutor/{id}/pacientes",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetPacientesByTutor"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetPacientesByTutor"
    },
    "GetHistorialPacienteLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetHistorialPacienteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetHistorialPaciente": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetHistorialPacienteLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPacienteIdVarHistorial": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /paciente/{id}/historial",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetHistorialPaciente"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetHistorialPaciente"
    },
    "GetFichaClinicaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFichaClinicaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetFichaClinica": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetFichaClinicaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPacienteIdVarFichaclinica": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /paciente/{id}/fichaClinica",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetFichaClinica"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetFichaClinica"
    },
    "RankingProcedimientosLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RankingProcedimientosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRankingProcedimientos": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RankingProcedimientosLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetProcedimientosRanking": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /procedimientos/ranking",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRankingProcedimientos"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRankingProcedimientos"
    },
    "GetVacunasPacienteLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetVacunasPacienteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetVacunasPaciente": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetVacunasPacienteLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPacienteIdVarVacunas": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /paciente/{id}/vacunas",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetVacunasPaciente"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetVacunasPaciente"
    },
    "PacienteTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Paciente",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idPaciente",
            "AttributeType": "S"
          },
          {
            "AttributeName": "idTutor",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idPaciente",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "PacientesPorTutorIndex",
            "KeySchema": [
              {
                "AttributeName": "idTutor",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "INCLUDE",
              "NonKeyAttributes": [
                "nombre",
                "sexo",
                "raza"
              ]
            }
          }
        ]
      }
    },
    "MedicoTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Medico",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idMedico",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idMedico",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "FichaClinicaTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "FichaClinica",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idPaciente",
            "AttributeType": "S"
          },
          {
            "AttributeName": "fechaHora",
            "AttributeType": "S"
          },
          {
            "AttributeName": "idMedico",
            "AttributeType": "S"
          },
          {
            "AttributeName": "procedimiento",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idPaciente",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "fechaHora",
            "KeyType": "RANGE"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "FichaPorMedicoIndex",
            "KeySchema": [
              {
                "AttributeName": "idMedico",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "fechaHora",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            }
          },
          {
            "IndexName": "ProcedimientoIndex",
            "KeySchema": [
              {
                "AttributeName": "procedimiento",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "INCLUDE",
              "NonKeyAttributes": [
                "costo"
              ]
            }
          }
        ]
      }
    },
    "TutorTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Tutor",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idTutor",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idTutor",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "MedicamentosTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Medicamentos",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idMedicamento",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idMedicamento",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "ProcedimientosTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Procedimientos",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idProcedimiento",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idProcedimiento",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "VacunasTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Vacunas",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idVacuna",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idVacuna",
            "KeyType": "HASH"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-d106c65f-3024",
      "Export": {
        "Name": "sls-DynamoTest-dev-ServerlessDeploymentBucketName"
      }
    },
    "CreatePacienteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreatePacienteLambdaVersionaNdYZJv3jWf6aSU7OTtHJpLZTfE95YbTatDzm99lE"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-CreatePacienteLambdaFunctionQualifiedArn"
      }
    },
    "GetPacientesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPacientesLambdaVersiongE2lEQzxtTdjo96IrgqpN4FVgAKK3GYpJR6S5V2Vzg"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetPacientesLambdaFunctionQualifiedArn"
      }
    },
    "GetPacienteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPacienteLambdaVersion9oa8AnepJCOL8y1xF4v73I7UfIQ6BesgHkzgX796zvU"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetPacienteLambdaFunctionQualifiedArn"
      }
    },
    "UpdatePacienteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdatePacienteLambdaVersionf1fpN6wfoIeJ4IhJK1BV8rpWVRUWzR5GftrP40g"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-UpdatePacienteLambdaFunctionQualifiedArn"
      }
    },
    "CreateMedicoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateMedicoLambdaVersionzqkfjQ3BecDKxyDlxWiIkFiqSnjVQqsN1ipTi6UyWM"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-CreateMedicoLambdaFunctionQualifiedArn"
      }
    },
    "GetMedicosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMedicosLambdaVersionFNm1uAMQvH6hkKhSK4X1oX1xt7e2rY2M1ekmBaRchig"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetMedicosLambdaFunctionQualifiedArn"
      }
    },
    "GetMedicoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMedicoLambdaVersionOP4Yk8xKPMyXZNQzDW55knOmoPn7jzivOLUd5Mvnw"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetMedicoLambdaFunctionQualifiedArn"
      }
    },
    "UpdateMedicoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateMedicoLambdaVersionlEjj342hDkn5HGaPHuJ8XIQXKszpx3dwjGUbhG0"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-UpdateMedicoLambdaFunctionQualifiedArn"
      }
    },
    "UpdateEstadoMedicoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateEstadoMedicoLambdaVersion7clnV98ASwQ21UPXGsTh0npBEJyNT56wtaLBUO9oCGI"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-UpdateEstadoMedicoLambdaFunctionQualifiedArn"
      }
    },
    "CreateTutorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateTutorLambdaVersionmJfS0WezszX0bydPptFuMyFWyuGvvtaGjo59Ded7JFg"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-CreateTutorLambdaFunctionQualifiedArn"
      }
    },
    "GetTutoresLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTutoresLambdaVersionEWYUiebHM23eXimrBM66esqJPBib3i2k10xf0FdA4"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetTutoresLambdaFunctionQualifiedArn"
      }
    },
    "GetTutorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTutorLambdaVersioneTp4RIJQd0czKERYwjhofrTnzz585yCBmJnVFEWmavA"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetTutorLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTutorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTutorLambdaVersionKMXQLY7W8H1y1VbAKoYlgoHEbrZpzWyKL7g9m2yE"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-UpdateTutorLambdaFunctionQualifiedArn"
      }
    },
    "GetPacientesByTutorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPacientesByTutorLambdaVersion5YM5uQAELZoksB5bJJAKACPaPRz2TtCHQeZ4wTZhdo"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetPacientesByTutorLambdaFunctionQualifiedArn"
      }
    },
    "GetHistorialPacienteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetHistorialPacienteLambdaVersionY9Kkb1fZg5V8MDtvU74Naapf5pHvR8MKI9tZS1bh1cU"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetHistorialPacienteLambdaFunctionQualifiedArn"
      }
    },
    "GetFichaClinicaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFichaClinicaLambdaVersionpko1FmhDbpZQct90Er9yMzq9TQjGn9z80xLxX7ul264"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetFichaClinicaLambdaFunctionQualifiedArn"
      }
    },
    "RankingProcedimientosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RankingProcedimientosLambdaVersionAnsnmzcnoSxQ9OTLs77kMwmqORnPTAM28ZtKQDtgA"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-RankingProcedimientosLambdaFunctionQualifiedArn"
      }
    },
    "GetVacunasPacienteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetVacunasPacienteLambdaVersionQyDtgwgiM0hax7HilxPs06VyweMrkIfeSpT3EhIA"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetVacunasPacienteLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-HttpApiUrl"
      }
    }
  }
}