{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "CreatePacienteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-createPaciente"
      }
    },
    "GetPacientesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getPacientes"
      }
    },
    "GetPacienteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getPaciente"
      }
    },
    "UpdatePacienteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-updatePaciente"
      }
    },
    "CreateMedicoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-createMedico"
      }
    },
    "GetMedicosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getMedicos"
      }
    },
    "GetMedicoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getMedico"
      }
    },
    "UpdateMedicoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-updateMedico"
      }
    },
    "UpdateEstadoMedicoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-updateEstadoMedico"
      }
    },
    "CreateTutorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-createTutor"
      }
    },
    "GetTutoresLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getTutores"
      }
    },
    "GetTutorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getTutor"
      }
    },
    "UpdateTutorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-updateTutor"
      }
    },
    "GetPacientesByTutorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getPacientesByTutor"
      }
    },
    "GetHistorialPacienteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getHistorialPaciente"
      }
    },
    "GetFichaClinicaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getFichaClinica"
      }
    },
    "RankingProcedimientosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-rankingProcedimientos"
      }
    },
    "GetVacunasPacienteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-getVacunasPaciente"
      }
    },
    "VolumenYGastoPromedioPorMesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-volumenYGastoPromedioPorMes"
      }
    },
    "DistribucionPorEspecialidadLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-distribucionPorEspecialidad"
      }
    },
    "TopMedicamentosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-topMedicamentos"
      }
    },
    "EvolucionIngresosVsCostesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-evolucionIngresosVsCostes"
      }
    },
    "DemandaVacunasPorMesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DynamoTest-dev-demandaVacunasPorMes"
      }
    },
    "CreatePacienteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/paciente.createPaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-createPaciente",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "CreatePacienteLogGroup"
      ]
    },
    "GetPacientesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/paciente.getPacientes",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getPacientes",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetPacientesLogGroup"
      ]
    },
    "GetPacienteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/paciente.getPaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getPaciente",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetPacienteLogGroup"
      ]
    },
    "UpdatePacienteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/paciente.updatePaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-updatePaciente",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "UpdatePacienteLogGroup"
      ]
    },
    "CreateMedicoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/medico.createMedico",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-createMedico",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "CreateMedicoLogGroup"
      ]
    },
    "GetMedicosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/medico.getMedicos",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getMedicos",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetMedicosLogGroup"
      ]
    },
    "GetMedicoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/medico.getMedico",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getMedico",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetMedicoLogGroup"
      ]
    },
    "UpdateMedicoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/medico.updateMedico",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-updateMedico",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "UpdateMedicoLogGroup"
      ]
    },
    "UpdateEstadoMedicoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/medico.updateEstadoMedico",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-updateEstadoMedico",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "UpdateEstadoMedicoLogGroup"
      ]
    },
    "CreateTutorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/tutor.createTutor",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-createTutor",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "CreateTutorLogGroup"
      ]
    },
    "GetTutoresLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/tutor.getTutores",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getTutores",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetTutoresLogGroup"
      ]
    },
    "GetTutorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/tutor.getTutor",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getTutor",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetTutorLogGroup"
      ]
    },
    "UpdateTutorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/tutor.updateTutor",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-updateTutor",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "UpdateTutorLogGroup"
      ]
    },
    "GetPacientesByTutorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/tutor.getPacientesByTutor",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getPacientesByTutor",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetPacientesByTutorLogGroup"
      ]
    },
    "GetHistorialPacienteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/busquedas.historialPaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getHistorialPaciente",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetHistorialPacienteLogGroup"
      ]
    },
    "GetFichaClinicaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/busquedas.fichaClinicaPaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getFichaClinica",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetFichaClinicaLogGroup"
      ]
    },
    "RankingProcedimientosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/busquedas.rankingProcedimientos",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-rankingProcedimientos",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "RankingProcedimientosLogGroup"
      ]
    },
    "GetVacunasPacienteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/busquedas.vacunasPaciente",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-getVacunasPaciente",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "GetVacunasPacienteLogGroup"
      ]
    },
    "VolumenYGastoPromedioPorMesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/dashboardqueries.volumenYGastoPromedioPorMes",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-volumenYGastoPromedioPorMes",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "VolumenYGastoPromedioPorMesLogGroup"
      ]
    },
    "DistribucionPorEspecialidadLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/dashboardqueries.distribucionPorEspecialidad",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-distribucionPorEspecialidad",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "DistribucionPorEspecialidadLogGroup"
      ]
    },
    "TopMedicamentosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/dashboardqueries.topMedicamentos",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-topMedicamentos",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "TopMedicamentosLogGroup"
      ]
    },
    "EvolucionIngresosVsCostesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/dashboardqueries.evolucionIngresosVsCostes",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-evolucionIngresosVsCostes",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "EvolucionIngresosVsCostesLogGroup"
      ]
    },
    "DemandaVacunasPorMesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-d106c65f-3024",
          "S3Key": "serverless/DynamoTest/dev/1752744806507-2025-07-17T09:33:26.507Z/DynamoTest.zip"
        },
        "Handler": "controllers/dashboardqueries.demandaVacunasPorMes",
        "Runtime": "nodejs18.x",
        "FunctionName": "DynamoTest-dev-demandaVacunasPorMes",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PACIENTETABLE": "Paciente",
            "MEDICOTABLE": "Medico",
            "TUTORTABLE": "Tutor",
            "FICHACLINICATABLE": "FichaClinica",
            "PROCEDIMIENTOTABLE": "Procedimientos",
            "VACUNATABLE": "Vacunas",
            "MEDICAMENTOTABLE": "Medicamentos"
          }
        },
        "Role": "arn:aws:iam::280053524810:role/LabRole"
      },
      "DependsOn": [
        "DemandaVacunasPorMesLogGroup"
      ]
    },
    "CreatePacienteLambdaVersionzmZBPVru94v0bjObbpzdtm5KuEbd2SkHSxaN9UZTQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreatePacienteLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "GetPacientesLambdaVersionAcFInhlKyb5aSyxzVydi6Ods9neGUOEjhSKqaYAHo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPacientesLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "GetPacienteLambdaVersionF6OVEK8ZaQlmbdmrUV7TsM7qy9CwYRfTNobWnO9c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPacienteLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "UpdatePacienteLambdaVersionUXwgNHg07vEcNYf7Yu7uI1Xxoyw659k1uRi0ZHO6aI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdatePacienteLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "CreateMedicoLambdaVersion9N2Lbxq03HxMVPcfczkR1EIRHTFfOLr6HU19FSaUU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateMedicoLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "GetMedicosLambdaVersionNPDjmxiVVCu2zwEdbhUXYLnLlAafJOsaIj4JPtoLMs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMedicosLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "GetMedicoLambdaVersion0LHhtz701t27xIF6eqGsGXM6xPJEa3wIOXzqMilo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMedicoLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "UpdateMedicoLambdaVersion2maUBfFCqnZ75tEe9JTiBrIYMsUs3mSQ3rRpFLIbk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateMedicoLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "UpdateEstadoMedicoLambdaVersionwPM3NR4MesFVXbbGeZxabPSvP29BJQgKyJsLbxXXlI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateEstadoMedicoLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "CreateTutorLambdaVersionSoI8BiztrmeM18HOmltUEiiD0vT6dzjQorJzs9tS2zg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateTutorLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "GetTutoresLambdaVersiondvrQttDkHUqJBfY7XAlxQZoF572wNCeBXGTj84OtRQk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTutoresLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "GetTutorLambdaVersionFt7Fup2nky2fyOSBDxywqXp6JL6BTRDlOEgLgQyc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTutorLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "UpdateTutorLambdaVersionTXFazGzBLKPcEbmIwbPTnGy5GuKShRKObq354UdLb0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTutorLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "GetPacientesByTutorLambdaVersionxCKKHUueCkZ0My7EJ16PLkhr484E7YvzEaEd9a0w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPacientesByTutorLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "GetHistorialPacienteLambdaVersionhXp3cOjyP9AO5fMGElcumfQ57EVUwGQCLva8eIaGPk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetHistorialPacienteLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "GetFichaClinicaLambdaVersionIw2tlBGgcbW0W1a5vTuOPJ4NMYowLVhY1sjc0h21QlM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFichaClinicaLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "RankingProcedimientosLambdaVersionuRH6c6CxKDr8wK2F9jEYgI0GfGJzf8cOYWbLRMarp0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RankingProcedimientosLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "GetVacunasPacienteLambdaVersion020Y18AVMukmKJ0TfwiuHuYr6Ts5jMw4TvVbwRTEPU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetVacunasPacienteLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "VolumenYGastoPromedioPorMesLambdaVersionP0FLxzyPSXluMqMmA8GRY2uG2JOgFx4MdPdLL5NaFe8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VolumenYGastoPromedioPorMesLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "DistribucionPorEspecialidadLambdaVersionweBMy3zOZT1qWEfmyZCRWxf9HTGOX2EzovaxivffeU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DistribucionPorEspecialidadLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "TopMedicamentosLambdaVersionaiD8sT9GfvGhG8vvad2V32jU0TyBRFIqEeaPQn2ug": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TopMedicamentosLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "EvolucionIngresosVsCostesLambdaVersionffbdXBApKYYMO0D5qlmwGUGhssqO55ag0UNvT2jbM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EvolucionIngresosVsCostesLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "DemandaVacunasPorMesLambdaVersiongseAHdDNt86xZjSuGgG0bHiOY5yU5VCkmsexKlkwb0c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DemandaVacunasPorMesLambdaFunction"
        },
        "CodeSha256": "jcHsBTNX32pbj+xz+YEmHU/osnQijHMrKj9lu07Xy98="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-DynamoTest",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "CreatePacienteLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreatePacienteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreatePaciente": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreatePacienteLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostPaciente": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /paciente",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreatePaciente"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreatePaciente"
    },
    "GetPacientesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPacientesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetPacientes": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetPacientesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPaciente": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /paciente",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetPacientes"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetPacientes"
    },
    "GetPacienteLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPacienteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetPaciente": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetPacienteLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPacienteIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /paciente/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetPaciente"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetPaciente"
    },
    "UpdatePacienteLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdatePacienteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdatePaciente": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdatePacienteLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutPacienteIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /paciente/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdatePaciente"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdatePaciente"
    },
    "CreateMedicoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateMedicoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateMedico": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateMedicoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostMedico": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /medico",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateMedico"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateMedico"
    },
    "GetMedicosLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMedicosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetMedicos": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetMedicosLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetMedico": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /medico",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetMedicos"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetMedicos"
    },
    "GetMedicoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMedicoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetMedico": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetMedicoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetMedicoIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /medico/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetMedico"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetMedico"
    },
    "UpdateMedicoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateMedicoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateMedico": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateMedicoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutMedicoIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /medico/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateMedico"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateMedico"
    },
    "UpdateEstadoMedicoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateEstadoMedicoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateEstadoMedico": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateEstadoMedicoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchMedicoIdVarCambiarestado": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /medico/{id}/cambiarEstado",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateEstadoMedico"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateEstadoMedico"
    },
    "CreateTutorLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateTutorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateTutor": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateTutorLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostTutor": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /tutor",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateTutor"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateTutor"
    },
    "GetTutoresLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTutoresLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetTutores": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetTutoresLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTutor": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /tutor",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetTutores"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetTutores"
    },
    "GetTutorLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTutorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetTutor": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetTutorLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTutorIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /tutor/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetTutor"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetTutor"
    },
    "UpdateTutorLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTutorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateTutor": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateTutorLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutTutorIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /tutor/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateTutor"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateTutor"
    },
    "GetPacientesByTutorLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPacientesByTutorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetPacientesByTutor": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetPacientesByTutorLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTutorIdVarPacientes": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /tutor/{id}/pacientes",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetPacientesByTutor"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetPacientesByTutor"
    },
    "GetHistorialPacienteLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetHistorialPacienteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetHistorialPaciente": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetHistorialPacienteLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPacienteIdVarHistorial": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /paciente/{id}/historial",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetHistorialPaciente"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetHistorialPaciente"
    },
    "GetFichaClinicaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFichaClinicaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetFichaClinica": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetFichaClinicaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPacienteIdVarFichaclinica": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /paciente/{id}/fichaClinica",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetFichaClinica"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetFichaClinica"
    },
    "RankingProcedimientosLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RankingProcedimientosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRankingProcedimientos": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RankingProcedimientosLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetProcedimientosRanking": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /procedimientos/ranking",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRankingProcedimientos"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRankingProcedimientos"
    },
    "GetVacunasPacienteLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetVacunasPacienteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetVacunasPaciente": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetVacunasPacienteLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPacienteIdVarVacunas": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /paciente/{id}/vacunas",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetVacunasPaciente"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetVacunasPaciente"
    },
    "VolumenYGastoPromedioPorMesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VolumenYGastoPromedioPorMesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationVolumenYGastoPromedioPorMes": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "VolumenYGastoPromedioPorMesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetDashboardVolumengastomensual": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /dashboard/volumenGastoMensual",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationVolumenYGastoPromedioPorMes"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationVolumenYGastoPromedioPorMes"
    },
    "DistribucionPorEspecialidadLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DistribucionPorEspecialidadLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDistribucionPorEspecialidad": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DistribucionPorEspecialidadLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetDashboardDistribucionespecialidades": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /dashboard/distribucionEspecialidades",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDistribucionPorEspecialidad"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDistribucionPorEspecialidad"
    },
    "TopMedicamentosLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TopMedicamentosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationTopMedicamentos": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "TopMedicamentosLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetDashboardTopmedicamentos": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /dashboard/topMedicamentos",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationTopMedicamentos"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationTopMedicamentos"
    },
    "EvolucionIngresosVsCostesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EvolucionIngresosVsCostesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEvolucionIngresosVsCostes": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EvolucionIngresosVsCostesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetDashboardEvolucioningresovscostes": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /dashboard/evolucionIngresoVsCostes",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEvolucionIngresosVsCostes"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEvolucionIngresosVsCostes"
    },
    "DemandaVacunasPorMesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DemandaVacunasPorMesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDemandaVacunasPorMes": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DemandaVacunasPorMesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetDashboardDemandavacunasmensual": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /dashboard/demandaVacunasMensual",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDemandaVacunasPorMes"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDemandaVacunasPorMes"
    },
    "PacienteTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Paciente",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idPaciente",
            "AttributeType": "S"
          },
          {
            "AttributeName": "idTutor",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idPaciente",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "PacientesPorTutorIndex",
            "KeySchema": [
              {
                "AttributeName": "idTutor",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "INCLUDE",
              "NonKeyAttributes": [
                "nombre",
                "sexo",
                "raza"
              ]
            }
          }
        ]
      }
    },
    "MedicoTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Medico",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idMedico",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idMedico",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "FichaClinicaTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "FichaClinica",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idPaciente",
            "AttributeType": "S"
          },
          {
            "AttributeName": "fechaHora",
            "AttributeType": "S"
          },
          {
            "AttributeName": "idMedico",
            "AttributeType": "S"
          },
          {
            "AttributeName": "procedimiento",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idPaciente",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "fechaHora",
            "KeyType": "RANGE"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "FichaPorMedicoIndex",
            "KeySchema": [
              {
                "AttributeName": "idMedico",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "fechaHora",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            }
          },
          {
            "IndexName": "ProcedimientoIndex",
            "KeySchema": [
              {
                "AttributeName": "procedimiento",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "INCLUDE",
              "NonKeyAttributes": [
                "costo"
              ]
            }
          }
        ]
      }
    },
    "TutorTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Tutor",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idTutor",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idTutor",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "MedicamentosTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Medicamentos",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idMedicamento",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idMedicamento",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "ProcedimientosTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Procedimientos",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idProcedimiento",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idProcedimiento",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "VacunasTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Vacunas",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "idVacuna",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "idVacuna",
            "KeyType": "HASH"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-d106c65f-3024",
      "Export": {
        "Name": "sls-DynamoTest-dev-ServerlessDeploymentBucketName"
      }
    },
    "CreatePacienteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreatePacienteLambdaVersionzmZBPVru94v0bjObbpzdtm5KuEbd2SkHSxaN9UZTQ"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-CreatePacienteLambdaFunctionQualifiedArn"
      }
    },
    "GetPacientesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPacientesLambdaVersionAcFInhlKyb5aSyxzVydi6Ods9neGUOEjhSKqaYAHo"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetPacientesLambdaFunctionQualifiedArn"
      }
    },
    "GetPacienteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPacienteLambdaVersionF6OVEK8ZaQlmbdmrUV7TsM7qy9CwYRfTNobWnO9c"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetPacienteLambdaFunctionQualifiedArn"
      }
    },
    "UpdatePacienteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdatePacienteLambdaVersionUXwgNHg07vEcNYf7Yu7uI1Xxoyw659k1uRi0ZHO6aI"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-UpdatePacienteLambdaFunctionQualifiedArn"
      }
    },
    "CreateMedicoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateMedicoLambdaVersion9N2Lbxq03HxMVPcfczkR1EIRHTFfOLr6HU19FSaUU"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-CreateMedicoLambdaFunctionQualifiedArn"
      }
    },
    "GetMedicosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMedicosLambdaVersionNPDjmxiVVCu2zwEdbhUXYLnLlAafJOsaIj4JPtoLMs"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetMedicosLambdaFunctionQualifiedArn"
      }
    },
    "GetMedicoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMedicoLambdaVersion0LHhtz701t27xIF6eqGsGXM6xPJEa3wIOXzqMilo"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetMedicoLambdaFunctionQualifiedArn"
      }
    },
    "UpdateMedicoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateMedicoLambdaVersion2maUBfFCqnZ75tEe9JTiBrIYMsUs3mSQ3rRpFLIbk"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-UpdateMedicoLambdaFunctionQualifiedArn"
      }
    },
    "UpdateEstadoMedicoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateEstadoMedicoLambdaVersionwPM3NR4MesFVXbbGeZxabPSvP29BJQgKyJsLbxXXlI"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-UpdateEstadoMedicoLambdaFunctionQualifiedArn"
      }
    },
    "CreateTutorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateTutorLambdaVersionSoI8BiztrmeM18HOmltUEiiD0vT6dzjQorJzs9tS2zg"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-CreateTutorLambdaFunctionQualifiedArn"
      }
    },
    "GetTutoresLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTutoresLambdaVersiondvrQttDkHUqJBfY7XAlxQZoF572wNCeBXGTj84OtRQk"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetTutoresLambdaFunctionQualifiedArn"
      }
    },
    "GetTutorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTutorLambdaVersionFt7Fup2nky2fyOSBDxywqXp6JL6BTRDlOEgLgQyc"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetTutorLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTutorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTutorLambdaVersionTXFazGzBLKPcEbmIwbPTnGy5GuKShRKObq354UdLb0"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-UpdateTutorLambdaFunctionQualifiedArn"
      }
    },
    "GetPacientesByTutorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPacientesByTutorLambdaVersionxCKKHUueCkZ0My7EJ16PLkhr484E7YvzEaEd9a0w"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetPacientesByTutorLambdaFunctionQualifiedArn"
      }
    },
    "GetHistorialPacienteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetHistorialPacienteLambdaVersionhXp3cOjyP9AO5fMGElcumfQ57EVUwGQCLva8eIaGPk"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetHistorialPacienteLambdaFunctionQualifiedArn"
      }
    },
    "GetFichaClinicaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFichaClinicaLambdaVersionIw2tlBGgcbW0W1a5vTuOPJ4NMYowLVhY1sjc0h21QlM"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetFichaClinicaLambdaFunctionQualifiedArn"
      }
    },
    "RankingProcedimientosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RankingProcedimientosLambdaVersionuRH6c6CxKDr8wK2F9jEYgI0GfGJzf8cOYWbLRMarp0"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-RankingProcedimientosLambdaFunctionQualifiedArn"
      }
    },
    "GetVacunasPacienteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetVacunasPacienteLambdaVersion020Y18AVMukmKJ0TfwiuHuYr6Ts5jMw4TvVbwRTEPU"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-GetVacunasPacienteLambdaFunctionQualifiedArn"
      }
    },
    "VolumenYGastoPromedioPorMesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VolumenYGastoPromedioPorMesLambdaVersionP0FLxzyPSXluMqMmA8GRY2uG2JOgFx4MdPdLL5NaFe8"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-VolumenYGastoPromedioPorMesLambdaFunctionQualifiedArn"
      }
    },
    "DistribucionPorEspecialidadLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DistribucionPorEspecialidadLambdaVersionweBMy3zOZT1qWEfmyZCRWxf9HTGOX2EzovaxivffeU"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-DistribucionPorEspecialidadLambdaFunctionQualifiedArn"
      }
    },
    "TopMedicamentosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TopMedicamentosLambdaVersionaiD8sT9GfvGhG8vvad2V32jU0TyBRFIqEeaPQn2ug"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-TopMedicamentosLambdaFunctionQualifiedArn"
      }
    },
    "EvolucionIngresosVsCostesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EvolucionIngresosVsCostesLambdaVersionffbdXBApKYYMO0D5qlmwGUGhssqO55ag0UNvT2jbM"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-EvolucionIngresosVsCostesLambdaFunctionQualifiedArn"
      }
    },
    "DemandaVacunasPorMesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DemandaVacunasPorMesLambdaVersiongseAHdDNt86xZjSuGgG0bHiOY5yU5VCkmsexKlkwb0c"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-DemandaVacunasPorMesLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-DynamoTest-dev-HttpApiUrl"
      }
    }
  }
}